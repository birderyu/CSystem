/********************************************************************************
**
** gsystem: A quick, micro library of C++
**
** @file garraystack.h
** @brief 使用数组实现的栈
** @author birderyu
** @contact https://github.com/birderyu
** @date 2017-1-24
** @version 1.0.0
**
********************************************************************************/

#ifndef _CORE_ARRAY_STACK_H_
#define _CORE_ARRAY_STACK_H_

#include "gstack.h"
#include "gdynamicarray.h"

namespace gsystem { // gsystem

/********************************************************************************
**
** @brief 使用数组实现的栈
** @template {T} 栈元素的类型
**
********************************************************************************/
template<typename T>
class GArrayStack 
	: public GStack<T>
{
public:
	/****************************************************************************
	**
	** @name GArrayStack
	** @brief 构造函数（constructor）
	** @param [in] capacity {gsize} 预分配栈元素的数量，默认为0
	**
	** 构造一个默认的栈，并为其预分配capacity个元素的空间
	**
	****************************************************************************/
	GArrayStack(gsize capacity = 0);

	/****************************************************************************
	**
	** @name GArrayStack
	** @brief 拷贝构造函数（copy constructor）
	** @param [in] stack {const GArrayStack<T> &} 栈
	**
	****************************************************************************/
	GArrayStack(const GArrayStack<T> &stack);

	/****************************************************************************
	**
	** @name GArrayStack
	** @brief 移动构造函数（move constructor）
	** @param [in] stack {GArrayStack<T> &&} 栈
	**
	****************************************************************************/
	GArrayStack(GArrayStack<T> &&stack);

	/****************************************************************************
	**
	** @name operator=
	** @brief 拷贝运算符
	** @param [in] stack {const GArrayStack<T> &} 栈
	** @return {GArrayStack<T> &} 栈的引用
	**
	****************************************************************************/
	GArrayStack<T>& operator=(const GArrayStack<T> &stack);

	/****************************************************************************
	**
	** @name operator=
	** @brief 移动运算符
	** @param [in] stack {GArrayStack<T> &&} 栈
	** @return {GArrayStack<T> &} 栈的引用
	**
	****************************************************************************/
	GArrayStack<T>& operator=(GArrayStack<T> &&stack);

	/****************************************************************************
	**
	** @name Size
	** @brief 获取栈元素的数量
	** @return {gsize} 元素的数量
	** @see GStack
	**
	****************************************************************************/
	gsize Size() const;

	/****************************************************************************
	**
	** @name IsEmpty
	** @brief 判断栈是否为空
	** @return {gbool} 若元素的数量为0，则返回true，否则返回false
	** @see GStack
	**
	****************************************************************************/
	gbool IsEmpty() const;

	/****************************************************************************
	**
	** @name Destroy
	** @brief 销毁栈
	** @see GStack
	**
	** 清空栈的数组，并且释放内存空间
	**
	****************************************************************************/
	gvoid Destroy();

	/****************************************************************************
	**
	** @name Clear
	** @brief 清空栈
	** @see GStack
	**
	** 仅清空栈的数组，不释放内存空间
	**
	****************************************************************************/
	gvoid Clear();
	
	/****************************************************************************
	**
	** @name Push
	** @brief 入栈
	** @param [in] value {const T &} 值
	** @see GStack
	**
	****************************************************************************/
	gvoid Push(const T &value);

	/****************************************************************************
	**
	** @name Push
	** @brief 入栈
	** @param [in] value {T &&} 值
	** @see GStack
	**
	****************************************************************************/
	gvoid Push(T &&value);

	/****************************************************************************
	**
	** @name Pop
	** @brief 出栈
	** @param [out] value {T *} 用于接受出队的值
	** @see GStack
	**
	****************************************************************************/
	gbool Pop(T *value = GNULL);

	/****************************************************************************
	**
	** @name Head
	** @brief 获取栈顶元素
	** @return {const T &} 栈顶元素的引用
	** @see GStack
	**
	****************************************************************************/
	const T &Top() const;

	/****************************************************************************
	**
	** @name Head
	** @brief 获取栈顶元素
	** @return {T &} 栈顶元素的引用
	** @see GStack
	**
	****************************************************************************/
	T &Top();

private:
	/****************************************************************************
	**
	** @name Capacity
	** @brief 获取容量（预分配内存）
	** @return {gsize} 预分配元素的数量
	**
	****************************************************************************/
	gsize Capacity() const;

	/****************************************************************************
	**
	** @name Reserve
	** @brief 重新预分配内存
	** @param [in] capacity {gsize} 预分配元素的数量
	**
	****************************************************************************/
	gvoid Reserve(gsize capacity);

	/****************************************************************************
	**
	** @name Fill
	** @brief 判断栈的内存是否被填满
	** @return {gbool} 若栈的内存已经被填满，则返回true，否则返回false
	**
	****************************************************************************/
	gbool Fill() const;

private:
	/****************************************************************************
	**
	** 栈顶
	**
	****************************************************************************/
	gsize m_TopCursor;

	/****************************************************************************
	**
	** 数组
	**
	****************************************************************************/
	GDynamicArray<T> m_tArray;
};

} // namespace gsystem

#include "inline/garraystack.inl"

#endif // _CORE_ARRAY_STACK_H_
