/********************************************************************************
**
** GSystem: A quick, micro library of C++
**
** @file glinkedlist.h
** @brief 链表接口
** @author birderyu
** @contact https://github.com/birderyu
** @date 2016-08-07
** @version 1.0.0
**
********************************************************************************/

#ifndef _CORE_LINKED_LIST_H_
#define _CORE_LINKED_LIST_H_

#include "gobject.h"
#include "gserialize.h"
#include "gstruct.h"

namespace gsystem { // gsystem

/********************************************************************************
**
** @brief 链表
** @template T {type} 链表元素值的类型
** @template NodeT {type} 链表节点的类型
**
** 从外部传入链表节点的类型，以增加扩展性
**
********************************************************************************/
template<typename T, typename NodeT>
class GLinkedList
	: public GListT<GLinkedList<T, NodeT>>
	, public GObject
{
public:
	/****************************************************************************
	**
	** 链表节点的类型
	**
	****************************************************************************/
	typedef NodeT Node;

public:
	/****************************************************************************
	**
	** @name ~GLinkedList
	** @brief 析构函数（destructor）
	**
	****************************************************************************/
	virtual ~GLinkedList() = 0 {}
	
	/****************************************************************************
	**
	** @name Size
	** @brief 获取链表元素的数量
	** @return {gsize} 元素的数量
	**
	****************************************************************************/
	virtual gsize Size() const = 0;

	/****************************************************************************
	**
	** @name IsEmpty
	** @brief 判断链表是否为空
	** @return {gbool} 若元素的数量为0，则返回true，否则返回false
	**
	****************************************************************************/
	virtual gbool IsEmpty() const = 0;

	/****************************************************************************
	**
	** @name GetFirstNode
	** @brief 获取第一个节点
	** @return {NodeT *} 节点的指针，若无则返回GNULL
	**
	****************************************************************************/
	virtual NodeT *GetFirstNode() = 0;

	/****************************************************************************
	**
	** @name GetFirstNode
	** @brief 获取第一个节点
	** @return {const NodeT *} 节点的指针，若无则返回GNULL
	**
	****************************************************************************/
	virtual const NodeT *GetFirstNode() const = 0;

	/****************************************************************************
	**
	** @name GetLastNode
	** @brief 获取最后一个节点
	** @return {NodeT *} 节点的指针，若无则返回GNULL
	**
	****************************************************************************/
	virtual NodeT *GetLastNode() = 0;

	/****************************************************************************
	**
	** @name GetLastNode
	** @brief 获取最后一个节点
	** @return {const NodeT *} 节点的指针，若无则返回GNULL
	**
	****************************************************************************/
	virtual const NodeT *GetLastNode() const = 0;

	/****************************************************************************
	**
	** @name GetNodeBefore
	** @brief 获取指定节点的前一个节点
	** @param [in] node {const NodeT *} 节点
	** @return {NodeT *} 节点的指针，若无则返回GNULL
	**
	****************************************************************************/
	virtual NodeT *GetNodeBefore(const NodeT *node) = 0;

	/****************************************************************************
	**
	** @name GetNodeBefore
	** @brief 获取指定节点的前一个节点
	** @param [in] node {const NodeT *} 节点
	** @return {const NodeT *} 节点的指针，若无则返回GNULL
	**
	****************************************************************************/
	virtual const NodeT *GetNodeBefore(const NodeT *node) const = 0;

	/****************************************************************************
	**
	** @name GetNodeAfter
	** @brief 获取指定节点的后一个节点
	** @param [in] node {const NodeT *} 节点
	** @return {NodeT *} 节点的指针，若无则返回GNULL
	**
	****************************************************************************/
	virtual NodeT *GetNodeAfter(const NodeT *node) = 0;

	/****************************************************************************
	**
	** @name GetNodeAfter
	** @brief 获取指定节点的后一个节点
	** @param [in] node {const NodeT *} 节点
	** @return {const NodeT *} 节点的指针，若无则返回GNULL
	**
	****************************************************************************/
	virtual const NodeT *GetNodeAfter(const NodeT *node) const = 0;

	/****************************************************************************
	**
	** @name GetNodeAt
	** @brief 获取指定位置的节点
	** @param [in] pos {gsize} 元素的下标，从0开始计数
	** @return {NodeT *} 节点的指针，若无则返回GNULL
	**
	****************************************************************************/
	virtual NodeT *GetNodeAt(gsize pos) = 0;

	/****************************************************************************
	**
	** @name GetNodeAt
	** @brief 获取指定位置的节点
	** @param [in] pos {gsize} 元素的下标，从0开始计数
	** @return {const NodeT *} 节点的指针，若无则返回GNULL
	**
	****************************************************************************/
	virtual const NodeT *GetNodeAt(gsize pos) const = 0;

	/****************************************************************************
	**
	** @name GetFirstValue
	** @brief 获取首位置的值
	** @return {T &} 值的引用
	**
	****************************************************************************/
	virtual T &GetFirstValue() = 0;

	/****************************************************************************
	**
	** @name GetFirstValue
	** @brief 获取首位置的值
	** @return {const T &} 值的引用
	**
	****************************************************************************/
	virtual const T &GetFirstValue() const = 0;

	/****************************************************************************
	**
	** @name GetLastValue
	** @brief 获取最后位置的值
	** @return {T &} 值的引用
	**
	****************************************************************************/
	virtual T &GetLastValue() = 0;

	/****************************************************************************
	**
	** @name GetLastValue
	** @brief 获取最后位置的值
	** @return {const T &} 值的引用
	**
	****************************************************************************/
	virtual const T &GetLastValue() const = 0;

	/****************************************************************************
	**
	** @name GetValueAt
	** @brief 获取指定位置元素的值
	** @param [in] pos {gsize} 元素的下标，从0开始计数
	** @return {T &} 值的引用
	**
	****************************************************************************/
	virtual T &GetValueAt(gsize pos) = 0;

	/****************************************************************************
	**
	** @name GetValueAt
	** @brief 获取指定位置元素的值
	** @param [in] pos {gsize} 元素的下标，从0开始计数
	** @return {const T &} 值的引用
	**
	****************************************************************************/
	virtual const T &GetValueAt(gsize pos) const = 0;

	/****************************************************************************
	**
	** @name SetValueAt
	** @brief 设置指定位置的值
	** @param [in] pos {gsize} 元素的下标，从0开始计数
	** @param [in] value {const T &} 值
	**
	****************************************************************************/
	virtual gvoid SetValueAt(gsize pos, const T &value) = 0;

	/****************************************************************************
	**
	** @name SetValueAt
	** @brief 设置指定位置的值
	** @param [in] pos {gsize} 元素的下标，从0开始计数
	** @param [in] value {T &&} 值
	**
	****************************************************************************/
	virtual gvoid SetValueAt(gsize pos, T &&value) = 0;

	/****************************************************************************
	**
	** @name FirstIndexOf
	** @brief 获取值第一次出现的位置
	** @param [in] value {const T &} 值
	** @return {gsize} 元素的下标，从0开始计数，若无则返回NULL_POS
	**
	****************************************************************************/
	virtual gsize FirstIndexOf(const T &value) const = 0;

	/****************************************************************************
	**
	** @name LastIndexOf
	** @brief 获取值从最后开始第一次出现的位置
	** @param [in] value {const T &} 值
	** @return {gsize} 元素的下标，从0开始计数，若无则返回NULL_POS
	**
	****************************************************************************/
	virtual gsize LastIndexOf(const T &value) const = 0;

	/****************************************************************************
	**
	** @name Find
	** @brief 查找第一个值为value的节点
	** @param [in] value {const T &} 值
	** @return {NodeT *} 节点的指针，若无则返回GNULL
	**
	****************************************************************************/
	virtual NodeT *Find(const T &value) = 0;

	/****************************************************************************
	**
	** @name Find
	** @brief 查找第一个值为value的节点
	** @param [in] value {const T &} 值
	** @return {const NodeT *} 节点的指针，若无则返回GNULL
	**
	****************************************************************************/
	virtual const NodeT *Find(const T &value) const = 0;

	/****************************************************************************
	**
	** @name AddFirst
	** @brief 将值插入到列表的首位
	** @param [in] value {const T &} 值
	** @return {NodeT *} 返回插入的节点
	**
	****************************************************************************/
	virtual NodeT *AddFirst(const T &value) = 0;

	/****************************************************************************
	**
	** @name AddFirst
	** @brief 将值插入到列表的首位
	** @param [in] value {T &&} 值
	** @return {NodeT *} 返回插入的节点
	**
	****************************************************************************/
	virtual NodeT *AddFirst(T &&value) = 0;

	/****************************************************************************
	**
	** @name AddLast
	** @brief 将值插入到列表的末尾
	** @param [in] value {const T &} 值
	** @return {NodeT *} 返回插入的节点
	**
	****************************************************************************/
	virtual NodeT *AddLast(const T &value) = 0;

	/****************************************************************************
	**
	** @name AddLast
	** @brief 将值插入到列表的末尾
	** @param [in] value {T &&} 值
	** @return {NodeT *} 返回插入的节点
	**
	****************************************************************************/
	virtual NodeT *AddLast(T &&value) = 0;

	/****************************************************************************
	**
	** @name InsertBefore
	** @brief 在指定位置之前插入值
	** @param [in] pos {gsize} 元素的下标，从0开始计数
	** @param [in] value {const T &} 值
	** @return {NodeT *} 返回插入的节点
	**
	****************************************************************************/
	virtual NodeT *InsertBefore(gsize pos, const T &value) = 0;

	/****************************************************************************
	**
	** @name InsertBefore
	** @brief 在指定位置之前插入值
	** @param [in] pos {gsize} 元素的下标，从0开始计数
	** @param [in] value {T &&} 值
	** @return {NodeT *} 返回插入的节点
	**
	****************************************************************************/
	virtual NodeT *InsertBefore(gsize pos, T &&value) = 0;

	/****************************************************************************
	**
	** @name InsertBefore
	** @brief 在指定节点之前插入值
	** @param [in] node {NodeT *} 节点
	** @param [in] value {const T &} 值
	** @return {NodeT *} 返回插入的节点
	**
	****************************************************************************/
	virtual NodeT *InsertBefore(NodeT *node, const T &value) = 0;

	/****************************************************************************
	**
	** @name InsertBefore
	** @brief 在指定节点之前插入值
	** @param [in] node {NodeT *} 节点
	** @param [in] value {T &&} 值
	** @return {NodeT *} 返回插入的节点
	**
	****************************************************************************/
	virtual NodeT *InsertBefore(NodeT *node, T &&value) = 0;

	/****************************************************************************
	**
	** @name InsertAfter
	** @brief 在指定位置之后插入值
	** @param [in] pos {gsize} 元素的下标，从0开始计数
	** @param [in] value {const T &} 值
	** @return {NodeT *} 返回插入的节点
	**
	****************************************************************************/
	virtual NodeT *InsertAfter(gsize pos, const T &value) = 0;

	/****************************************************************************
	**
	** @name InsertAfter
	** @brief 在指定位置之后插入值
	** @param [in] pos {gsize} 元素的下标，从0开始计数
	** @param [in] value {T &&} 值
	** @return {NodeT *} 返回插入的节点
	**
	****************************************************************************/
	virtual NodeT *InsertAfter(gsize pos, T &&value) = 0;

	/****************************************************************************
	**
	** @name InsertAfter
	** @brief 在指定节点之后插入值
	** @param [in] node {NodeT *} 节点
	** @param [in] value {const T &} 值
	** @return {NodeT *} 返回插入的节点
	**
	****************************************************************************/
	virtual NodeT *InsertAfter(NodeT *node, const T &value) = 0;

	/****************************************************************************
	**
	** @name InsertAfter
	** @brief 在指定节点之后插入值
	** @param [in] node {NodeT *} 节点
	** @param [in] value {T &&} 值
	** @return {NodeT *} 返回插入的节点
	**
	****************************************************************************/
	virtual NodeT *InsertAfter(NodeT *node, T &&value) = 0;

	/****************************************************************************
	**
	** @name Remove
	** @brief 移除节点
	** @param [in] node {const NodeT *} 节点
	**
	****************************************************************************/
	virtual gvoid Remove(const NodeT *node) = 0;

	/****************************************************************************
	**
	** @name RemoveAt
	** @brief 移除指定位置的元素
	** @param [in] pos {gsize} 元素的下标，从0开始计数
	** @param [out] value {T *} 该位置上的值，若传入参数为GNULL则说明不需要此返回值
	**
	****************************************************************************/
	virtual gvoid RemoveAt(gsize pos, T *value = GNULL) = 0;

	/****************************************************************************
	**
	** @name RemoveFirst
	** @brief 移除第一个元素
	** @param [out] value {T *} 该位置上的值，若传入参数为GNULL则说明不需要此返回值
	**
	****************************************************************************/
	virtual gvoid RemoveFirst(T *value = GNULL) = 0;

	/****************************************************************************
	**
	** @name RemoveLast
	** @brief 移除最后一个元素
	** @param [out] value {T *} 该位置上的值，若传入参数为GNULL则说明不需要此返回值
	**
	****************************************************************************/
	virtual gvoid RemoveLast(T *value = GNULL) = 0;

	/****************************************************************************
	**
	** @name RemoveAll
	** @brief 移除所有元素
	**
	****************************************************************************/
	virtual gvoid RemoveAll() = 0;

	/****************************************************************************
	**
	** @name Invert
	** @brief 翻转链表
	**
	****************************************************************************/
	virtual gvoid Invert() = 0;

	/****************************************************************************
	**
	** @name IndexOfCircle
	** @brief 若链表为环，则返回环首位置元素的下标，否则返回NULL_POS
	** @return {gsize} 元素的下标，从0开始计数，若非环则返回NULL_POS
	**
	****************************************************************************/
	virtual gsize IndexOfCircle() const = 0;

	/****************************************************************************
	**
	** @name FindCircle
	** @brief 若链表为环，则返回环首位置的节点，否则返回GNULL
	** @return {NodeT *} 节点的指针，若非环则返回GNULL
	**
	****************************************************************************/
	virtual NodeT *FindCircle() = 0;

	/****************************************************************************
	**
	** @name FindCircle
	** @brief 若链表为环，则返回环首位置的节点，否则返回GNULL
	** @return {const NodeT *} 节点的指针，若非环则返回GNULL
	**
	****************************************************************************/
	virtual const NodeT *FindCircle() const = 0;

	/****************************************************************************
	**
	** @name IndexOfCross
	** @brief 若该链表与另一个链表相交叉，则返回交叉首位置元素的下标，否则返回NULL_POS
	** @param [in] list {const GLinkedList &} 链表
	** @return {gsize} 元素的下标，从0开始计数，若没有交叉则返回NULL_POS
	**
	****************************************************************************/
	virtual gsize IndexOfCross(const GLinkedList &list) = 0;

	/****************************************************************************
	**
	** @name operator[]
	** @brief 获取指定位置元素的值
	** @param [in] pos {gsize} 元素的下标，从0开始计数
	** @return {T &} 值的引用
	**
	** 此方法的实现依赖于GetValueAt，因此不要在GetValueAt的实现中调用此方法
	**
	****************************************************************************/
	T &operator[](gsize pos);

	/****************************************************************************
	**
	** @name operator[]
	** @brief 获取指定位置元素的值
	** @param [in] pos {gsize} 元素的下标，从0开始计数
	** @return {const T &} 值的引用
	**
	** 此方法的实现依赖于GetValueAt，因此不要在GetValueAt的实现中调用此方法
	**
	****************************************************************************/
	const T &operator[](gsize pos) const;
};

} // namespace gsystem

#include "inline/glinkedlist.inl"

#endif // _CORE_LINKED_LIST_H_