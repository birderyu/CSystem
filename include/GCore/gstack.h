/********************************************************************************
**
** GSystem: A quick, micro library of C++
**
** @file gstack.h
** @brief 栈接口
** @author birderyu
** @contact https://github.com/birderyu
** @date 2017-1-24
** @version 1.0.0
**
** 该文件包含了栈的接口声明，栈是一种限定操作的列表，其元素是先进后出（FILO）的。
**
********************************************************************************/

#ifndef _CORE_STACK_H_
#define _CORE_STACK_H_

#include "gobject.h"

namespace gsystem { // gsystem

/********************************************************************************
**
** @brief 栈
** @template {DataT} 栈元素的类型
**
********************************************************************************/
template<typename DataT>
class GStack 
	: virtual public GObject
{
public:
	/****************************************************************************
	**
	** @name ~GStack
	** @brief 析构函数（destructor）
	**
	****************************************************************************/
	virtual ~GStack() = 0 {}

	/****************************************************************************
	**
	** @name Size
	** @brief 获取栈元素的数量
	** @return {gsize} 元素的数量
	**
	****************************************************************************/
	virtual gsize Size() const = 0;

	/****************************************************************************
	**
	** @name IsEmpty
	** @brief 判断栈是否为空
	** @return {gbool} 若元素的数量为0，则返回true，否则返回false
	**
	****************************************************************************/
	virtual gbool IsEmpty() const = 0;

	/****************************************************************************
	**
	** @name Destroy
	** @brief 销毁栈
	**
	****************************************************************************/
	virtual gvoid Destroy() = 0;

	/****************************************************************************
	**
	** @name Clear
	** @brief 清空栈
	**
	****************************************************************************/
	virtual gvoid Clear() = 0;

	/****************************************************************************
	**
	** @name Push
	** @brief 入栈
	** @param [in] value {const DataT &} 值
	**
	** 值将被拷贝一份入栈
	**
	****************************************************************************/
	virtual gvoid Push(const DataT &value) = 0;

	/****************************************************************************
	**
	** @name Push
	** @brief 入栈
	** @param [in] value {DataT &&} 值
	**
	** 值将被优先使用移动入栈，若无法移动则使用拷贝
	**
	****************************************************************************/
	virtual gvoid Push(DataT &&value) = 0;

	/****************************************************************************
	**
	** @name Pop
	** @brief 出栈
	** @param [out] value {DataT *} 用于接受出队的值
	**
	** 若参数为空（GNULL），则不会接受出栈的值，否则会优先将出栈的值移动到value中
	**
	****************************************************************************/
	virtual gvoid Pop(DataT *data = GNULL) = 0;

	/****************************************************************************
	**
	** @name Head
	** @brief 获取栈顶元素
	** @return {const DataT &} 栈顶元素的引用
	**
	****************************************************************************/
	virtual const DataT &Top() const = 0;

	/****************************************************************************
	**
	** @name Head
	** @brief 获取栈顶元素
	** @return {DataT &} 栈顶元素的引用
	**
	****************************************************************************/
	virtual DataT &Top() = 0;
};

} // namespace gsystem

#endif // _CORE_STACK_H_