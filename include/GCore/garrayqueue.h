/********************************************************************************
**
** GSystem: A quick, micro library of C++
**
** @file garrayqueue.h
** @brief 使用数组实现的队列
** @author birderyu
** @contact https://github.com/birderyu
** @date 2017-1-24
** @version 1.0.0
**
********************************************************************************/

#ifndef _CORE_ARRAY_QUEUE_H_
#define _CORE_ARRAY_QUEUE_H_

#include "gqueue.h"
#include "gdynamicarray.h"

namespace gsystem { // gsystem

/********************************************************************************
**
** @brief 使用数组实现的队列
** @template {DataT} 队列元素的类型
**
********************************************************************************/
template <typename DataT>
class GArrayQueue
	: public GQueue<DataT>
{
public:
	/****************************************************************************
	**
	** @name GArrayQueue
	** @brief 构造函数（constructor）
	** @param [in] capacity {gsize} 预分配队列元素的数量，默认为0
	**
	** 构造一个默认的队列，并为其预分配capacity个元素的空间
	**
	****************************************************************************/
	GArrayQueue(gsize capacity = 0);

	/****************************************************************************
	**
	** @name GArrayQueue
	** @brief 拷贝构造函数（copy constructor）
	** @param [in] queue {const GArrayQueue<DataT> &} 队列
	**
	****************************************************************************/
	GArrayQueue(const GArrayQueue<DataT> &queue);

	/****************************************************************************
	**
	** @name GArrayQueue
	** @brief 移动构造函数（move constructor）
	** @param [in] queue {GArrayQueue<DataT> &&} 队列
	**
	****************************************************************************/
	GArrayQueue(GArrayQueue<DataT> &&queue);

	/****************************************************************************
	**
	** @name operator=
	** @brief 拷贝运算符
	** @param [in] queue {const GArrayQueue<DataT> &} 队列
	** @return {GArrayQueue<DataT> &} 队列的引用
	**
	****************************************************************************/
	GArrayQueue<DataT> &operator=(const GArrayQueue<DataT> &queue);

	/****************************************************************************
	**
	** @name operator=
	** @brief 移动运算符
	** @param [in] queue {GArrayQueue<DataT> &&} 队列
	** @return {GArrayQueue<DataT> &} 队列的引用
	**
	****************************************************************************/
	GArrayQueue<DataT> &operator=(GArrayQueue<DataT> &&queue);

	/****************************************************************************
	**
	** @name Size
	** @brief 获取队列元素的数量
	** @return {gsize} 元素的数量
	** @see GQueue
	**
	****************************************************************************/
	gsize Size() const;

	/****************************************************************************
	**
	** @name IsEmpty
	** @brief 判断队列是否为空
	** @return {gbool} 若元素的数量为0，则返回true，否则返回false
	** @see GQueue
	**
	****************************************************************************/
	gbool IsEmpty() const;

	/****************************************************************************
	**
	** @name Destroy
	** @brief 销毁队列
	** @see GQueue
	**
	** 清空队列的数组，并且释放内存空间
	**
	****************************************************************************/
	gvoid Destroy();

	/****************************************************************************
	**
	** @name Clear
	** @brief 清空队列
	** @see GQueue
	**
	** 仅清空队列的数组，不释放内存空间
	**
	****************************************************************************/
	gvoid Clear();
	
	/****************************************************************************
	**
	** @name EnQueue
	** @brief 入队
	** @param [in] value {const DataT &} 值
	** @see GQueue
	**
	****************************************************************************/
	gvoid EnQueue(const DataT &value);

	/****************************************************************************
	**
	** @name EnQueue
	** @brief 入队
	** @param [in] value {DataT &&} 值
	** @see GQueue
	**
	****************************************************************************/
	gvoid EnQueue(DataT &&value);

	/****************************************************************************
	**
	** @name DeQueue
	** @brief 出队
	** @param [out] value {DataT *} 用于接受出队的值
	** @see GQueue
	**
	****************************************************************************/
	gvoid DeQueue(DataT *value = GNULL);

	/****************************************************************************
	**
	** @name Head
	** @brief 获取队首元素
	** @return {const DataT &} 队首元素的引用
	** @see GQueue
	**
	****************************************************************************/
	const DataT &Head() const;

	/****************************************************************************
	**
	** @name Head
	** @brief 获取队首元素
	** @return {DataT &} 队首元素的引用
	** @see GQueue
	**
	****************************************************************************/
	DataT &Head();
	
private:
	/****************************************************************************
	**
	** @name Capacity
	** @brief 获取容量（预分配内存）
	** @return {gsize} 预分配元素的数量
	**
	****************************************************************************/
	gsize Capacity() const;

	/****************************************************************************
	**
	** @name Reserve
	** @brief 重新预分配内存
	** @param [in] capacity {gsize} 预分配元素的数量
	**
	****************************************************************************/
	gvoid Reserve(gsize capacity);

private:
	/****************************************************************************
	**
	** 队首
	**
	****************************************************************************/
	gsize m_nHead;

	/****************************************************************************
	**
	** 队尾的下一位
	**
	****************************************************************************/
	gsize m_nTail;

	/****************************************************************************
	**
	** 数组
	**
	****************************************************************************/
	GDynamicArray<DataT> m_tArray;
};

} // namespace gsystem

#include "inline/garrayqueue.inl"

#endif // _CORE_ARRAY_QUEUE_H_
